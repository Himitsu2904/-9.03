#include <iostream> //стандартная библиотека ввода-вывода
#include <cctype>
using namespace std; //простанство имен std

int main() //главная функция программы, точка ее старта
{
	setlocale(0, "ru"); //локализация кода программы
	srand(time(0)); //операция, с которой при каждом выполнении программы будут генерироваться разные значения
	/*1. Создать массив из 10 целых  чисел. Сжать массив, удалив из него все 0, и заполнить освободившиеся справа
	элементы значениями -1.*/
	int size = 10, * arr = new int[size], * mass = new int[size], ind = 0;
	/*оглашение переменных размера массива, динамического основного массива, динамического сжатого и индекса
	для последнего*/
	for (int i = 0; i < size; i++) //цикл генерации элементов масива и его сжатия
	{
		*(arr + i) = rand() % 6; //генерация рандомного значения элемента массива
		cout << *(arr + i) << "\t"; //вывод элемента массива
		if (*(arr + i) != 0) //условие ненулевости элемента массива
		{
			*(mass + ind) = *(arr + i); //присвоение элемента массива сжатому массиву
			ind++; //повышение значения индекса сжатого массива на 1
		}
	}
	cout << "\nСжатый массив: " << endl;
	for (int i = 0; i < ind; i++) //цикл вывода ненулевых элементов массива
	{
		cout << *(mass + i) << "\t"; //вывод элемента массива
	}
	for (int i = ind; i < size; i++) //цикл работы с пустыми ячейками в сжатом массиве
	{
		*(mass + i) = -1; //присвоение пустому элементу массива значения -1
		cout << *(mass + i) << "\t"; //вывод элемента массива
	}

	cout << "\n----------------------------------------------------------------\n";

	/*2. Создать массивиз 10 случайных чисел в диапазоне от -20 до 20. Заменить все отрицательные значения их
	модулями.*/
	for (int i = 0; i < size; i++) //цикл генерации рандомных значений элементов массива
	{
		*(arr + i) = rand() % 41 - 20; //генерация рандомного значения элемента массива
		cout << *(arr + i) << "\t"; //вывод элемента массива
	}
	cout << "\nОтмодулированый массив: " << endl;
	for (int i = 0; i < size; i++) //цикл модулирования элементов массива
	{
		if (*(arr + i) < 0) //если элемент массива отрицательный
		{
			*(arr + i) = fabs(*(arr + i)); //присвоение элементу массива его модуля
		}
		cout << *(arr + i) << "\t"; //вывод элемента массива
	}

	cout << "\n----------------------------------------------------------------\n";

	/*3. Создать массив из 10 вещественных чисел. Преобразовать массив так, чтобы сначала шли все элементы с
	вещественной частью, а потом без нее.*/
	double* array = new double[size];
	//оглашение динамического массива вещественных чисел и динамического массива их упорядоченных значений
	int type; //оглашение переменной типа числа (целое или вещественное)
	for (int i = 0; i < size; i++) //цикл генерации рандомных значений элементов массива
	{
		*(array + i) = rand() % 41 - 20; //генерация рандомного значения элемента массива
		type = rand() % 2; //определение типа числа (целое или вещественное)
		if (type) //если число вещественное
		{
			*(array + i) += rand() % 101 / 100.0; //генерация рандомной вещественной части элемента массива
		}
		cout << *(array + i) << "\t"; //вывод элемента массива
	}
	cout << "\nПреобразованный массив: " << endl;
	for (int i = 0; i < size; i++) //цикл вывода вещественных значений элементов массива
	{
		if (*(array + i) - (int)*(array + i) != 0) //если число вещественное
		{
			cout << *(array + i) << "\t"; //вывод элемента массива
		}
	}
	for (int i = 0; i < size; i++) //цикл вывода целых значений эдементов массива
	{
		if (*(array + i) - (int)*(array + i) == 0) //если число целое
		{
			cout << *(array + i) << "\t";//вывод элемента массива
		}
	}

	cout << "\n----------------------------------------------------------------\n";

	//4. Дан массив из 10 элементов типа char. Замените в нем все цифры на большие буквы.
	char* ptr = new char[size]; //оглашение динамического массива символов
	cout << "Введите массив символов: ";
	for (int i = 0; i < size; i++) //цикл ввода элементов массива
	{
		cin >> *(ptr + i); //ввод элемента массива
	}
	cout << "Массив после замены: ";
	for (int i = 0; i < size; i++) //цикл замены цифр на буквы
	{
		if (isdigit(*(ptr + i))) //если элемент массива является числом
		{
			*(ptr + i) += 16; //замена числа на большую букву латиницы
		}
		cout << *(ptr + i) << "\t"; //вывод элемента массива
	}

	cout << "\n----------------------------------------------------------------\n";

	/*5. Создать массив из 10 случайных чисел в диапазоне от 0 до 100. Найти элемент, максимально близкий к
	среднему арифметическому значений массива.*/
	int index; //оглашение переменной индекса, максимально близкого к среднему арифметическому значений массива
	double sred_ar, sum = 0, s;
	//оглашение переменных среднего арифметического элементов массива, их суммы и растояния между СА массива и элементом
	for (int i = 0; i < size; i++) //цикл генерации рандомных значений элементов массива и их суммирования
	{
		*(arr + i) = rand() % 101; //генерация рандомного значения элемента массива
		cout << *(arr + i) << "\t"; //вывод элемента массива
		sum += *(arr + i); //прибавление элемента массива к сумме элементов массива
	}
	sred_ar = sum / size; //расчет среднего арифметического элементов массива
	cout << "\nСреднее арифметическое элементов массива = " << sred_ar;
	//вывод среднего арифметического элементов массива
	s = fabs(sred_ar - *arr);
	//расчет растояния между средним арифметическим элементов массива и его первым элементом как начало
	for (int i = 0; i < size; i++) //цикл поиска самого близкого к среднему арифметическому элемента
	{
		if ((fabs(sred_ar - *(arr + i))) < s) //если расчитаное растояние меньше ранее приянтого за наименьшее
		{
			s = (fabs(sred_ar - *(arr + i))); //присвоение нового наименьшего растояния между СА и элементом
			index = i; //фиксация индекса элемента массива, наиболее приближеного к его среднему арифметическому
		}
	}
	cout << "\nНаименьшее растояние = " << s; //вывод наименьшего растояния между СА и элементом
	cout << "\nЭлемент, максимально близкий к среднему арифметическому значений массива = " << *(arr + index);
	//вывод элемента, максимально близкого к среднему арифметическому значений массива

	cout << "\n----------------------------------------------------------------\n";

	//6. Осуществить циклический сдвиг массива на N элементов. Направление сдвига указывает пользователь.
	int n, k = 0; //оглашение переменных значения сдвига и индекса сдвинутого массива
	cout << "Введите значение сдвига: ";
	cin >> n; //ввод значения сдвига
	cout << "Сам массив: \n";
	for (int i = 0; i < size; i++) //цикл генерации рандомных значений элементов массива
	{
		*(arr + i) = rand() % 41 - 20; //генерация рандомного значения элемента массива
		cout << *(arr + i) << "\t"; //вывод элемента массива
	}
	for (int i = size - n; i < size; i++)
	//цикл присвоения первым элементам сдвинутого массива значений последних элементов основного массива
	{
		*(mass + k) = *(arr + i);
		//присвоение первым элементам сдвинутого массива значений последних элементов основного массива
		k++; //увеличение значени индекса сдвинутого массива на 1
	}
	for (int i = 0; i <= size - n; i++)
	//цикл присвоения остальным элементам сдвинутого массива значений первых элементов основного массива
	{
		*(mass + k) = *(arr + i);
		//присвоение остальным элементам сдвинутого массива значений первых элементов основного массива
		k++; //увеличение значени индекса сдвинутого массива на 1
	}
	cout << "\nМассив после сдвига: " << endl;
	for (int i = 0; i < size; i++) //цикл вывода массива после сдвига
	{
		cout << *(mass + i) << "\t"; //вывод элемента массива после сдвига
	}

	delete[]arr; //освобождение памяти от массива arr
	delete[]mass; //освобождение памяти от массива mass
	delete[]ptr; //освобождение памяти от массива ptr
	delete[]array; //освобождение памяти от массива array
}